apiVersion: placement.openstack.org/v1beta1
kind: PlacementAPI
metadata:
  finalizers:
  - openstack.org/placementapi
  name: placement
spec:
  customServiceConfig: |
    [DEFAULT]
    debug = true
  databaseInstance: openstack
  databaseAccount: placement
  passwordSelectors:
    service: PlacementPassword
  preserveJobs: false
  replicas: 1
  secret: osp-secret
  serviceUser: placement
status:
  databaseHostname: openstack.placement-kuttl-tests.svc
  readyCount: 1
  conditions:
  - message: Setup complete
    reason: Ready
    status: "True"
    type: Ready
  - message: Create service completed
    reason: Ready
    status: "True"
    type: CreateServiceReady
  - message: DB create completed
    reason: Ready
    status: "True"
    type: DBReady
  - message: DBsync completed
    reason: Ready
    status: "True"
    type: DBSyncReady
  - message: Deployment completed
    reason: Ready
    status: "True"
    type: DeploymentReady
  - message: Input data complete
    reason: Ready
    status: "True"
    type: InputReady
  - message: Setup complete
    reason: Ready
    status: "True"
    type: KeystoneEndpointReady
  - message: Setup complete
    reason: Ready
    status: "True"
    type: KeystoneServiceReady
  - message: MariaDBAccount creation complete
    reason: Ready
    status: "True"
    type: MariaDBAccountReady
  - message: NetworkAttachments completed
    reason: Ready
    status: "True"
    type: NetworkAttachmentsReady
  - message: RoleBinding created
    reason: Ready
    status: "True"
    type: RoleBindingReady
  - message: Role created
    reason: Ready
    status: "True"
    type: RoleReady
  - message: ServiceAccount created
    reason: Ready
    status: "True"
    type: ServiceAccountReady
  - message: Service config create completed
    reason: Ready
    status: "True"
    type: ServiceConfigReady
  - message: Input data complete
    reason: Ready
    status: "True"
    type: TLSInputReady
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: placement
spec:
  replicas: 1
  template:
    metadata:
      labels:
        service: placement
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: service
                  operator: In
                  values:
                  - placement
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - args:
        - --single-child
        - --
        - /usr/bin/tail
        - -n+1
        - -F
        - /var/log/placement/placement-api.log
        command:
        - /usr/bin/dumb-init
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 8778
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 30
        name: placement-log
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 8778
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 30
        resources: {}
        securityContext:
          runAsUser: 42482
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /usr/local/bin/container-scripts
          name: scripts
          readOnly: true
        - mountPath: /var/log/placement
          name: logs
        - mountPath: /var/lib/openstack/config
          name: config-data
        - mountPath: /var/lib/kolla/config_files/config.json
          name: config-data
          readOnly: true
          subPath: placement-api-config.json
      - args:
        - -c
        - /usr/local/bin/kolla_start
        command:
        - /bin/bash
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 8778
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 30
        name: placement-api
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 8778
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 30
        resources: {}
      restartPolicy: Always
      securityContext: {}
      serviceAccount: placement-placement
      serviceAccountName: placement-placement
status:
  availableReplicas: 1
  replicas: 1
---
# the openshift annotations can't be checked through the deployment above
apiVersion: v1
kind: Pod
metadata:
  annotations:
    openshift.io/scc: anyuid
  labels:
    service: placement
status:
  phase: Running
---
apiVersion: v1
kind: Service
metadata:
  labels:
    endpoint: internal
    service: placement
  name: placement-internal
spec:
  ports:
    - name: placement-internal
  selector:
    service: placement
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    endpoint: public
    service: placement
  name: placement-public
spec:
  ports:
    - name: placement-public
  selector:
    service: placement
  type: ClusterIP
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    placement.openstack.org/name: placement
  name: placement-config-data
  ownerReferences:
  - blockOwnerDeletion: true
    controller: true
    kind: PlacementAPI
    name: placement
---
apiVersion: keystone.openstack.org/v1beta1
kind: KeystoneEndpoint
metadata:
  name: placement
  ownerReferences:
  - apiVersion: placement.openstack.org/v1beta1
    blockOwnerDeletion: true
    controller: true
    kind: PlacementAPI
    name: placement
---
# the actual addresses of the api endpoints are platform specific, so we can't rely on
# kuttl asserts to check them. This short script gathers the addresses and checks that
# the two endpoints are defined and their addresses follow the default pattern
apiVersion: kuttl.dev/v1beta1
kind: TestAssert
namespaced: true
commands:
  - script: |
      . $PLACEMENT_KUTTL_DIR/../lib/helper_functions.sh
      apiEndpoints=$(oc get -n $NAMESPACE KeystoneEndpoint placement -o go-template-file=$PLACEMENT_KUTTL_DIR/../go_templates/apiEndpoints.gotemplate)
      assert_regex $apiEndpoints 'http:\/\/placement-internal\..+\.svc.*'
      assert_regex $apiEndpoints 'http:\/\/placement-public\..+\.svc.*'

      # when using image digests the containerImage URLs are SHA's so we verify them with a script
      tupleTemplate='{{ range (index .spec.template.spec.containers 1).env }}{{ .name }}{{ "#" }}{{ .value}}{{"\n"}}{{ end }}'
      imageTuples=$(oc get -n openstack-operators deployment placement-operator-controller-manager -o go-template="$tupleTemplate")
      # format of imageTuple is: RELATED_IMAGE_PLACEMENT_<service>#<image URL with SHA> separated by newlines
      for ITEM in $(echo $imageTuples); do
        # it is an image
        if echo $ITEM | grep 'RELATED_IMAGE' &> /dev/null; then
          NAME=$(echo $ITEM | sed -e 's|^RELATED_IMAGE_PLACEMENT_\([^_]*\)_.*|\1|')
          IMG_FROM_ENV=$(echo $ITEM | sed -e 's|^.*#\(.*\)|\1|')
          template='{{.spec.containerImage}}'
          case $NAME in
            API)
              SERVICE_IMAGE=$(oc get -n $NAMESPACE placementapi placement -o go-template="$template")
              ;;
          esac
          if [ "$SERVICE_IMAGE" != "$IMG_FROM_ENV" ]; then
            echo "$NAME image does not equal $VALUE"
            exit 1
          fi
        fi
      done
