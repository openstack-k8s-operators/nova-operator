/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

//
// Generated by:
//
// operator-sdk create webhook --group nova --version v1beta1 --kind Nova --programmatic-validation --defaulting
//

package v1beta1

import (
	"fmt"

	"github.com/robfig/cron/v3"

	apierrors "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/util/validation/field"
	"k8s.io/utils/ptr"
	ctrl "sigs.k8s.io/controller-runtime"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

// NovaDefaults -
type NovaDefaults struct {
	APIContainerImageURL         string
	ConductorContainerImageURL   string
	MetadataContainerImageURL    string
	NoVNCContainerImageURL       string
	SchedulerContainerImageURL   string
	NovaComputeContainerImageURL string
}

var novaDefaults NovaDefaults

// log is for logging in this package.
var novalog = logf.Log.WithName("nova-resource")

// SetupNovaDefaults - initialize Nova spec defaults for use with either internal or external webhooks
func SetupNovaDefaults(defaults NovaDefaults) {
	novaDefaults = defaults
	novalog.Info("Nova defaults initialized", "defaults", defaults)
}

// SetupWebhookWithManager sets up the webhook with the Manager
func (r *Nova) SetupWebhookWithManager(mgr ctrl.Manager) error {
	return ctrl.NewWebhookManagedBy(mgr).
		For(r).
		Complete()
}

//+kubebuilder:webhook:path=/mutate-nova-openstack-org-v1beta1-nova,mutating=true,failurePolicy=fail,sideEffects=None,groups=nova.openstack.org,resources=nova,verbs=create;update,versions=v1beta1,name=mnova.kb.io,admissionReviewVersions=v1

var _ webhook.Defaulter = &Nova{}

// Default implements webhook.Defaulter so a webhook will be registered for the type
func (r *Nova) Default() {
	novalog.Info("default", "name", r.Name)

	r.Spec.Default()
}

// Default - set defaults for this Nova spec
func (spec *NovaSpec) Default() {
	if spec.APIServiceTemplate.ContainerImage == "" {
		spec.APIServiceTemplate.ContainerImage = novaDefaults.APIContainerImageURL
	}

	if spec.MetadataServiceTemplate.ContainerImage == "" {
		spec.MetadataServiceTemplate.ContainerImage = novaDefaults.MetadataContainerImageURL
	}

	// NOTE(gibi): this cannot be expressed as kubebuilder defaults as the
	// MetadataServiceTemplate is used both in the cellTemplate and in the
	// NovaSpec but we need different defaults in the two places
	if spec.MetadataServiceTemplate.Enabled == nil {
		spec.MetadataServiceTemplate.Enabled = ptr.To(true)
	}

	if spec.SchedulerServiceTemplate.ContainerImage == "" {
		spec.SchedulerServiceTemplate.ContainerImage = novaDefaults.SchedulerContainerImageURL
	}

	for cellName, cellTemplate := range spec.CellTemplates {
		if cellTemplate.ConductorServiceTemplate.ContainerImage == "" {
			cellTemplate.ConductorServiceTemplate.ContainerImage = novaDefaults.ConductorContainerImageURL
		}

		if cellTemplate.MetadataServiceTemplate.ContainerImage == "" {
			cellTemplate.MetadataServiceTemplate.ContainerImage = novaDefaults.MetadataContainerImageURL
		}

		if cellTemplate.MetadataServiceTemplate.Enabled == nil {
			cellTemplate.MetadataServiceTemplate.Enabled = ptr.To(false)
		}

		if cellTemplate.NoVNCProxyServiceTemplate.ContainerImage == "" {
			cellTemplate.NoVNCProxyServiceTemplate.ContainerImage = novaDefaults.NoVNCContainerImageURL
		}

		if cellName == Cell0Name {
			// in cell0 disable VNC by default
			if cellTemplate.NoVNCProxyServiceTemplate.Enabled == nil {
				cellTemplate.NoVNCProxyServiceTemplate.Enabled = ptr.To(false)
			}
		} else {
			// in other cells enable VNC by default
			if cellTemplate.NoVNCProxyServiceTemplate.Enabled == nil {
				cellTemplate.NoVNCProxyServiceTemplate.Enabled = ptr.To(true)
			}
		}

		for computeName, computeTemplate := range cellTemplate.NovaComputeTemplates {
			if computeTemplate.ContainerImage == "" {
				computeTemplate.ContainerImage = novaCellDefaults.NovaComputeContainerImageURL
			}
			cellTemplate.NovaComputeTemplates[computeName] = computeTemplate
		}
		// "cellTemplate" is a by-value copy, so we need to re-inject the updated version of it into the map
		spec.CellTemplates[cellName] = cellTemplate
	}
}

// Default - set defaults for this Nova spec
func (spec *NovaSpecCore) Default() {

	// NOTE(gibi): this cannot be expressed as kubebuilder defaults as the
	// MetadataServiceTemplate is used both in the cellTemplate and in the
	// NovaSpec but we need different defaults in the two places
	if spec.MetadataServiceTemplate.Enabled == nil {
		spec.MetadataServiceTemplate.Enabled = ptr.To(true)
	}

	for cellName, cellTemplate := range spec.CellTemplates {

		if cellTemplate.MetadataServiceTemplate.Enabled == nil {
			cellTemplate.MetadataServiceTemplate.Enabled = ptr.To(false)
		}

		if cellName == Cell0Name {
			// in cell0 disable VNC by default
			if cellTemplate.NoVNCProxyServiceTemplate.Enabled == nil {
				cellTemplate.NoVNCProxyServiceTemplate.Enabled = ptr.To(false)
			}
		} else {
			// in other cells enable VNC by default
			if cellTemplate.NoVNCProxyServiceTemplate.Enabled == nil {
				cellTemplate.NoVNCProxyServiceTemplate.Enabled = ptr.To(true)
			}
		}

		for computeName, computeTemplate := range cellTemplate.NovaComputeTemplates {
			if computeTemplate.ContainerImage == "" {
				computeTemplate.ContainerImage = novaCellDefaults.NovaComputeContainerImageURL
			}
			cellTemplate.NovaComputeTemplates[computeName] = computeTemplate
		}
		// "cellTemplate" is a by-value copy, so we need to re-inject the updated version of it into the map
		spec.CellTemplates[cellName] = cellTemplate
	}
}

// NOTE: change verbs to "verbs=create;update;delete" if you want to enable deletion validation.
//+kubebuilder:webhook:path=/validate-nova-openstack-org-v1beta1-nova,mutating=false,failurePolicy=fail,sideEffects=None,groups=nova.openstack.org,resources=nova,verbs=create;update,versions=v1beta1,name=vnova.kb.io,admissionReviewVersions=v1

var _ webhook.Validator = &Nova{}

// NovaComputeTemplateValidator - interface for NovaComputeTemplate and NovaComputeTemplateCore specific validations
// +kubebuilder:object:generate=false
type NovaComputeTemplateValidator interface {
	ReplicaCount() int32
	ComputeDriverString() string
	DefaultConfigOverwriteValidator() map[string]string
	ValidateDefaultConfigOverwrite(basePath *field.Path) field.ErrorList
}

// ReplicaCount -
func (r *NovaComputeTemplate) ReplicaCount() int32 {
	return *r.Replicas
}

// ComputeDriverString -
func (r *NovaComputeTemplate) ComputeDriverString() string {
	return r.ComputeDriver
}

// DefaultConfigOverwriteValidator -
func (r *NovaComputeTemplate) DefaultConfigOverwriteValidator() map[string]string {
	return r.DefaultConfigOverwrite
}

// ValidateDefaultConfigOverwrite -
func (r *NovaComputeTemplate) ValidateDefaultConfigOverwrite(basePath *field.Path) field.ErrorList {
	return ComputeValidateDefaultConfigOverwrite(
		basePath, r.DefaultConfigOverwrite)
}

// ReplicaCount -
func (r *NovaComputeTemplateCore) ReplicaCount() int32 {
	return *r.Replicas
}

// ComputeDriverString -
func (r *NovaComputeTemplateCore) ComputeDriverString() string {
	return r.ComputeDriver
}

// DefaultConfigOverwriteValidator -
func (r *NovaComputeTemplateCore) DefaultConfigOverwriteValidator() map[string]string {
	return r.DefaultConfigOverwrite
}

// ValidateDefaultConfigOverwrite -
func (r *NovaComputeTemplateCore) ValidateDefaultConfigOverwrite(basePath *field.Path) field.ErrorList {
	return ComputeValidateDefaultConfigOverwrite(
		basePath, r.DefaultConfigOverwrite)
}

// NovaCellTypeValidator - interface for NovaCellTemplate and NovaCellTemplateCore specific validations
// +kubebuilder:object:generate=false
type NovaCellTypeValidator interface {
	CellMessageBusInstanceVal() string
	MetadataServiceTemplateValEnabled() bool
	DBPurgeVal() *NovaCellDBPurge
	NoVNCProxyServiceTemplateValidateCell0(basePath *field.Path) field.ErrorList
	NovaComputeTemplateValidators() map[string]NovaComputeTemplateValidator
	NovaComputeTemplatesCount() int
	MetadataServiceValidateDefaultConfigOverwrite(basePath *field.Path) field.ErrorList
	MetadataServiceValidateCell0(basePath *field.Path) field.ErrorList
}

// CellMessageBusInstanceVal -
func (r *NovaCellTemplate) CellMessageBusInstanceVal() string {
	return r.CellMessageBusInstance
}

// MetadataServiceTemplateValEnabled -
func (r *NovaCellTemplate) MetadataServiceTemplateValEnabled() bool {
	return *r.MetadataServiceTemplate.Enabled
}

// DBPurgeVal -
func (r *NovaCellTemplate) DBPurgeVal() *NovaCellDBPurge {
	return &r.DBPurge
}

// NoVNCProxyServiceTemplateValidateCell0 -
func (r *NovaCellTemplate) NoVNCProxyServiceTemplateValidateCell0(basePath *field.Path) field.ErrorList {
	return r.NoVNCProxyServiceTemplate.ValidateCell0(basePath)
}

// NovaComputeTemplatesCount -
func (r *NovaCellTemplate) NovaComputeTemplatesCount() int {
	return len(r.NovaComputeTemplates)
}

// MetadataServiceValidateDefaultConfigOverwrite -
func (r *NovaCellTemplate) MetadataServiceValidateDefaultConfigOverwrite(basePath *field.Path) field.ErrorList {
	return r.MetadataServiceTemplate.ValidateDefaultConfigOverwrite(basePath)
}

// MetadataServiceValidateCell0 -
func (r *NovaCellTemplate) MetadataServiceValidateCell0(basePath *field.Path) field.ErrorList {
	return r.MetadataServiceTemplate.ValidateCell0(basePath)
}

// NovaComputeTemplateValidators -
func (r *NovaCellTemplate) NovaComputeTemplateValidators() map[string]NovaComputeTemplateValidator {
	convertedNovaComputeTemplates := make(map[string]NovaComputeTemplateValidator)
	for key, value := range r.NovaComputeTemplates {
		convertedNovaComputeTemplates[key] = &value
	}
	return convertedNovaComputeTemplates
}

// CellMessageBusInstanceVal -
func (r *NovaCellTemplateCore) CellMessageBusInstanceVal() string {
	return r.CellMessageBusInstance
}

// MetadataServiceTemplateValEnabled -
func (r *NovaCellTemplateCore) MetadataServiceTemplateValEnabled() bool {
	return *r.MetadataServiceTemplate.Enabled
}

// DBPurgeVal -
func (r *NovaCellTemplateCore) DBPurgeVal() *NovaCellDBPurge {
	return &r.DBPurge
}

// NoVNCProxyServiceTemplateValidateCell0 -
func (r *NovaCellTemplateCore) NoVNCProxyServiceTemplateValidateCell0(basePath *field.Path) field.ErrorList {
	return r.NoVNCProxyServiceTemplate.ValidateCell0(basePath)
}

// NovaComputeTemplatesCount -
func (r *NovaCellTemplateCore) NovaComputeTemplatesCount() int {
	return len(r.NovaComputeTemplates)
}

// MetadataServiceValidateCell0 -
func (r *NovaCellTemplateCore) MetadataServiceValidateCell0(basePath *field.Path) field.ErrorList {
	return r.MetadataServiceTemplate.ValidateCell0(basePath)
}

// MetadataServiceValidateDefaultConfigOverwrite -
func (r *NovaCellTemplateCore) MetadataServiceValidateDefaultConfigOverwrite(basePath *field.Path) field.ErrorList {
	return r.MetadataServiceTemplate.ValidateDefaultConfigOverwrite(basePath)
}

// NovaComputeTemplateValidators -
func (r *NovaCellTemplateCore) NovaComputeTemplateValidators() map[string]NovaComputeTemplateValidator {
	convertedNovaComputeTemplates := make(map[string]NovaComputeTemplateValidator)
	for key, value := range r.NovaComputeTemplates {
		convertedNovaComputeTemplates[key] = &value
	}
	return convertedNovaComputeTemplates
}

// ValidateNovaComputeName - validate the name of the NovaComputeTemplate
func validateCellTemplates(basePath *field.Path, cellTemplates map[string]NovaCellTypeValidator, metadataServiceEnabled bool) field.ErrorList {
	var errors field.ErrorList

	if _, ok := cellTemplates[Cell0Name]; !ok {
		errors = append(
			errors,
			field.Required(basePath.Child("cellTemplates"),
				"cell0 specification is missing, cell0 key is required in cellTemplates"),
		)
	}

	cellMessageBusNames := make(map[string]string)

	for name, cell := range cellTemplates {
		cellPath := basePath.Child("cellTemplates").Key(name)
		errors = append(
			errors,
			ValidateCellName(cellPath, name)...,
		)
		if name != Cell0Name {
			if dupName, ok := cellMessageBusNames[cell.CellMessageBusInstanceVal()]; ok {
				errors = append(errors, field.Invalid(
					cellPath.Child("cellMessageBusInstance"),
					cell.CellMessageBusInstanceVal(),
					fmt.Sprintf(
						"RabbitMqCluster CR need to be uniq per cell. It's duplicated with cell: %s",
						dupName),
				),
				)
			}

			cellMessageBusNames[cell.CellMessageBusInstanceVal()] = name
		}
		if cell.MetadataServiceTemplateValEnabled() && metadataServiceEnabled {
			errors = append(
				errors,
				field.Invalid(
					cellPath.Child("metadataServiceTemplate").Child("enabled"),
					cell.MetadataServiceTemplateValEnabled(),
					"should be false as metadata is enabled on the top level too. "+
						"The metadata service can be either enabled on top "+
						"or in the cells but not in both places at the same time."),
			)
		}

		errors = append(
			errors,
			cell.MetadataServiceValidateDefaultConfigOverwrite(cellPath.Child("metadataServiceTemplate"))...)

		errors = append(
			errors,
			cell.DBPurgeVal().Validate(cellPath.Child("dbPurge"))...)

		if name == Cell0Name {
			errors = append(
				errors,
				cell.MetadataServiceValidateCell0(cellPath.Child("metadataServiceTemplate"))...)
			errors = append(
				errors,
				cell.NoVNCProxyServiceTemplateValidateCell0(cellPath.Child("noVNCProxyServiceTemplate"))...)
			errors = append(
				errors,
				ValidateNovaComputeCell0(
					cellPath.Child("novaComputeTemplates"), cell.NovaComputeTemplatesCount())...)
		}

		for computeName, computeTemplate := range cell.NovaComputeTemplateValidators() {
			if computeTemplate.ComputeDriverString() == IronicDriver {
				errors = append(
					errors, ValidateIronicDriverReplicas(cellPath.Child("novaComputeTemplates").Key(computeName), int(computeTemplate.ReplicaCount()))...)
			}
			errors = append(
				errors, ValidateNovaComputeName(
					cellPath.Child("novaComputeTemplates").Key(computeName), computeName)...,
			)
			errors = append(
				errors, computeTemplate.ValidateDefaultConfigOverwrite(cellPath.Child("novaComputeTemplates").Key(computeName))...,
			)
		}
	}

	return errors
}

func validateAPIServiceTemplate(basePath *field.Path, defaultConfigOverwrite map[string]string) field.ErrorList {
	errors := ValidateAPIDefaultConfigOverwrite(
		basePath.Child("apiServiceTemplate").Child("defaultConfigOverwrite"),
		defaultConfigOverwrite)
	return errors
}

// ValidateCreate validates the NovaSpec during the webhook invocation. It is
// expected to be called by the validation webhook in the higher level meta
// operator
func (r *NovaSpec) ValidateCreate(basePath *field.Path) field.ErrorList {
	convertedCellTemplates := make(map[string]NovaCellTypeValidator)
	for key, value := range r.CellTemplates {
		value := value
		convertedCellTemplates[key] = &value
	}
	errors := validateCellTemplates(basePath, convertedCellTemplates, *r.MetadataServiceTemplate.Enabled)
	errors = append(errors, validateAPIServiceTemplate(basePath, r.APIServiceTemplate.DefaultConfigOverwrite)...)
	errors = append(
		errors,
		r.MetadataServiceTemplate.ValidateDefaultConfigOverwrite(
			basePath.Child("metadataServiceTemplate"))...)

	return errors
}

// ValidateCreate validates the NovaSpec during the webhook invocation. It is
// expected to be called by the validation webhook in the higher level meta
// operator
func (r *NovaSpecCore) ValidateCreate(basePath *field.Path) field.ErrorList {
	convertedCellTemplates := make(map[string]NovaCellTypeValidator)
	for key, value := range r.CellTemplates {
		value := value
		convertedCellTemplates[key] = &value
	}
	errors := validateCellTemplates(basePath, convertedCellTemplates, *r.MetadataServiceTemplate.Enabled)
	errors = append(errors, validateAPIServiceTemplate(basePath, r.APIServiceTemplate.DefaultConfigOverwrite)...)
	errors = append(
		errors,
		r.MetadataServiceTemplate.ValidateDefaultConfigOverwrite(
			basePath.Child("metadataServiceTemplate"))...)

	return errors
}

// ValidateCreate implements webhook.Validator so a webhook will be registered for the type
func (r *Nova) ValidateCreate() (admission.Warnings, error) {
	novalog.Info("validate create", "name", r.Name)

	errors := r.Spec.ValidateCreate(field.NewPath("spec"))
	if len(errors) != 0 {
		novalog.Info("validation failed", "name", r.Name)
		return nil, apierrors.NewInvalid(
			schema.GroupKind{Group: "nova.openstack.org", Kind: "Nova"},
			r.Name, errors)
	}
	return nil, nil
}

// ValidateUpdate validates the NovaSpec during the webhook invocation. It is
// expected to be called by the validation webhook in the higher level meta
// operator
func (r *NovaSpec) ValidateUpdate(old NovaSpec, basePath *field.Path) field.ErrorList {
	convertedCellTemplates := make(map[string]NovaCellTypeValidator)
	for key, value := range r.CellTemplates {
		value := value
		convertedCellTemplates[key] = &value
	}

	errors := validateCellTemplates(basePath, convertedCellTemplates, *r.MetadataServiceTemplate.Enabled)
	errors = append(errors, validateAPIServiceTemplate(basePath, r.APIServiceTemplate.DefaultConfigOverwrite)...)
	errors = append(
		errors,
		r.MetadataServiceTemplate.ValidateDefaultConfigOverwrite(
			basePath.Child("metadataServiceTemplate"))...)

	return errors
}

// ValidateUpdate implements webhook.Validator so a webhook will be registered for the type
func (r *Nova) ValidateUpdate(old runtime.Object) (admission.Warnings, error) {
	novalog.Info("validate update", "name", r.Name)
	oldNova, ok := old.(*Nova)
	if !ok || oldNova == nil {
		return nil, apierrors.NewInternalError(fmt.Errorf("unable to convert existing object"))
	}

	errors := r.Spec.ValidateUpdate(oldNova.Spec, field.NewPath("spec"))
	if len(errors) != 0 {
		novalog.Info("validation failed", "name", r.Name)
		return nil, apierrors.NewInvalid(
			schema.GroupKind{Group: "nova.openstack.org", Kind: "Nova"},
			r.Name, errors)
	}
	return nil, nil
}

// ValidateDelete implements webhook.Validator so a webhook will be registered for the type
func (r *Nova) ValidateDelete() (admission.Warnings, error) {
	novalog.Info("validate delete", "name", r.Name)

	// TODO(user): fill in your validation logic upon object deletion.
	return nil, nil
}

// Validate the field values
func (r *NovaCellDBPurge) Validate(basePath *field.Path) field.ErrorList {
	var errors field.ErrorList
	// k8s uses the same cron lib to validate the schedule of the CronJob
	// https://github.com/kubernetes/kubernetes/blob/master/pkg/apis/batch/validation/validation.go
	if _, err := cron.ParseStandard(*r.Schedule); err != nil {
		errors = append(
			errors,
			field.Invalid(
				basePath.Child("schedule"), r.Schedule, err.Error()),
		)
	}
	return errors
}
