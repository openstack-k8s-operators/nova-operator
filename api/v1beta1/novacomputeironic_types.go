/*
Copyright 2022.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1beta1

import (
	condition "github.com/openstack-k8s-operators/lib-common/modules/common/condition"

	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.

// NovaComputeIronicTemplate defines the input parameters specified by the user to
// create a NovaComputeIronic via higher level CRDs.
type NovaComputeIronicTemplate struct {
	// +kubebuilder:validation:Optional
	// ContainerImage - The service specific Container Image URL (will be set to environmental default if empty)
	ContainerImage string `json:"containerImage"`

	// +kubebuilder:validation:Optional
	// +kubebuilder:default=1
	// +kubebuilder:validation:Maximum=32
	// +kubebuilder:validation:Minimum=0
	// Replicas of the service to run
	Replicas *int32 `json:"replicas"`

	// +kubebuilder:validation:Optional
	// NodeSelector to target subset of worker nodes running this service. Setting here overrides
	// any global NodeSelector settings within the Nova CR.
	NodeSelector map[string]string `json:"nodeSelector,omitempty"`

	// +kubebuilder:validation:Optional
	// CustomServiceConfig - customize the service config using this parameter to change service defaults,
	// or overwrite rendered information using raw OpenStack config format. The content gets added to
	// to /etc/<service>/<service>.conf.d directory as custom.conf file.
	CustomServiceConfig string `json:"customServiceConfig"`

	// +kubebuilder:validation:Optional
	// ConfigOverwrite - interface to overwrite default config files like e.g. logging.conf
	// But can also be used to add additional files. Those get added to the service config dir in /etc/<service> .
	DefaultConfigOverwrite map[string]string `json:"defaultConfigOverwrite,omitempty"`

	// +kubebuilder:validation:Optional
	// Resources - Compute Resources required by this service (Limits/Requests).
	// https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Resources corev1.ResourceRequirements `json:"resources,omitempty"`

	// +kubebuilder:validation:Optional
	// NetworkAttachments is a list of NetworkAttachment resource names to expose the services to the given network
	NetworkAttachments []string `json:"networkAttachments,omitempty"`

	// +kubebuilder:validation:Optional
	// ExternalEndpoints, expose a VIP via MetalLB on the pre-created address pool
	ExternalEndpoints []MetalLBConfig `json:"externalEndpoints,omitempty"`
}

// NovaComputeIronicSpec defines the desired state of NovaComputeIronic
type NovaComputeIronicSpec struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// +kubebuilder:validation:Required
	// CellName is the name of the Nova Cell this novncproxy belongs to.
	CellName string `json:"cellName"`

	// +kubebuilder:validation:Required
	// Secret is the name of the Secret instance containing password
	// information for the NovaComputeIronic service. This secret is expected to be
	// generated by the nova-operator based on the information passed to the
	// Nova CR.
	Secret string `json:"secret"`

	// +kubebuilder:validation:Optional
	// +kubebuilder:default="nova"
	// ServiceUser - optional username used for this service to register in
	// keystone
	ServiceUser string `json:"serviceUser"`

	// +kubebuilder:validation:Required
	KeystoneAuthURL string `json:"keystoneAuthURL"`

	// +kubebuilder:validation:Optional
	// +kubebuilder:default=nova
	// CellDatabaseUser - username to use when accessing the cell DB
	CellDatabaseUser string `json:"cellDatabaseUser"`

	// +kubebuilder:validation:Required
	// CellDatabaseHostname - hostname to use when accessing the cell DB
	CellDatabaseHostname string `json:"cellDatabaseHostname"`

	// +kubebuilder:validation:Required
	// CellMessageBusSecretName - the name of the Secret conntaining the
	// transport URL information to use when accessing the API message
	// bus.
	CellMessageBusSecretName string `json:"cellMessageBusSecretName"`

	// +kubebuilder:validation:Optional
	// Debug - enable debug for different deploy stages. If an init container
	// is used, it runs and the actual action pod gets started with sleep
	// infinity
	Debug Debug `json:"debug,omitempty"`

	// +kubebuilder:validation:Required
	// NovaServiceBase specifies the generic fields of the service
	NovaServiceBase `json:",inline"`

	// +kubebuilder:validation:Required
	// ServiceAccount - service account name used internally to provide Nova services the default SA name
	ServiceAccount string `json:"serviceAccount"`
}

// NovaComputeIronicStatus defines the observed state of NovaComputeIronic
type NovaComputeIronicStatus struct {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	// Map of hashes to track e.g. job status
	Hash map[string]string `json:"hash,omitempty"`

	// Conditions
	Conditions condition.Conditions `json:"conditions,omitempty" optional:"true"`

	// ReadyCount defines the number of replicas ready from NovaComputeIronic
	ReadyCount int32 `json:"readyCount,omitempty"`

	// NetworkAttachments status of the deployment pods
	NetworkAttachments map[string][]string `json:"networkAttachments,omitempty"`
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status
//+kubebuilder:printcolumn:name="NetworkAttachments",type="string",JSONPath=".spec.networkAttachments",description="NetworkAttachments"
//+kubebuilder:printcolumn:name="Status",type="string",JSONPath=".status.conditions[0].status",description="Status"
//+kubebuilder:printcolumn:name="Message",type="string",JSONPath=".status.conditions[0].message",description="Message"

// NovaComputeIronic is the Schema for the NovaComputeIronic
type NovaComputeIronic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   NovaComputeIronicSpec   `json:"spec,omitempty"`
	Status NovaComputeIronicStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// NovaComputeIronicList contains a list of NovaComputeIronic
type NovaComputeIronicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NovaComputeIronic `json:"items"`
}

func init() {
	SchemeBuilder.Register(&NovaComputeIronic{}, &NovaComputeIronicList{})
}

// GetConditions returns the list of conditions from the status
func (s NovaComputeIronicStatus) GetConditions() condition.Conditions {
	return s.Conditions
}

// GetSecret returns the value of the NovaComputeIronic.Spec.Secret
func (n NovaComputeIronic) GetSecret() string {
	return n.Spec.Secret
}

// NewNovaComputeIronicSpec constructs a NovaMetadataSpec
func NewNovaComputeIronicSpec(
	novaCell NovaCellSpec,
) NovaComputeIronicSpec {
	novaironicSpec := NovaComputeIronicSpec{
		CellName:                 novaCell.CellName,
		Secret:                   novaCell.Secret,
		CellDatabaseHostname:     novaCell.CellDatabaseHostname,
		CellDatabaseUser:         novaCell.CellDatabaseUser,
		CellMessageBusSecretName: novaCell.CellMessageBusSecretName,
		Debug:                    novaCell.Debug,
		NovaServiceBase: NovaServiceBase{
			ContainerImage:         novaCell.NovaComputeIronicServiceTemplate.ContainerImage,
			Replicas:               novaCell.NovaComputeIronicServiceTemplate.Replicas,
			NodeSelector:           novaCell.NovaComputeIronicServiceTemplate.NodeSelector,
			CustomServiceConfig:    novaCell.NovaComputeIronicServiceTemplate.CustomServiceConfig,
			DefaultConfigOverwrite: novaCell.NovaComputeIronicServiceTemplate.DefaultConfigOverwrite,
			Resources:              novaCell.NovaComputeIronicServiceTemplate.Resources,
			NetworkAttachments:     novaCell.NovaComputeIronicServiceTemplate.NetworkAttachments,
		},
		KeystoneAuthURL:   novaCell.KeystoneAuthURL,
		ServiceUser:       novaCell.ServiceUser,
		ServiceAccount:    novaCell.ServiceAccount,
	}
	return novaironicSpec
}
