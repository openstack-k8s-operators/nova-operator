/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

//
// Generated by:
//
// operator-sdk create webhook --group nova --version v1beta1 --kind NovaCell --programmatic-validation --defaulting
//

package v1beta1

import (
	"k8s.io/apimachinery/pkg/runtime"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	ctrl "sigs.k8s.io/controller-runtime"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
	"k8s.io/apimachinery/pkg/util/validation/field"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// NovaCellDefaults -
type NovaCellDefaults struct {
	ConductorContainerImageURL string
	MetadataContainerImageURL  string
	NoVNCContainerImageURL     string
}

var novaCellDefaults NovaCellDefaults

// log is for logging in this package.
var novacelllog = logf.Log.WithName("novacell-resource")

// SetupNovaCellDefaults - initialize NovaCell spec defaults for use with either internal or external webhooks
func SetupNovaCellDefaults(defaults NovaCellDefaults) {
	novaCellDefaults = defaults
	novacelllog.Info("NovaCell defaults initialized", "defaults", defaults)
}

// SetupWebhookWithManager sets up the webhook with the Manager
func (r *NovaCell) SetupWebhookWithManager(mgr ctrl.Manager) error {
	return ctrl.NewWebhookManagedBy(mgr).
		For(r).
		Complete()
}

//+kubebuilder:webhook:path=/mutate-nova-openstack-org-v1beta1-novacell,mutating=true,failurePolicy=fail,sideEffects=None,groups=nova.openstack.org,resources=novacells,verbs=create;update,versions=v1beta1,name=mnovacell.kb.io,admissionReviewVersions=v1

var _ webhook.Defaulter = &NovaCell{}

// Default implements webhook.Defaulter so a webhook will be registered for the type
func (r *NovaCell) Default() {
	novacelllog.Info("default", "name", r.Name)

	r.Spec.Default()
}

// Default - set defaults for this NovaCell spec
func (spec *NovaCellSpec) Default() {
	if spec.ConductorServiceTemplate.ContainerImage == "" {
		spec.ConductorServiceTemplate.ContainerImage = novaCellDefaults.ConductorContainerImageURL
	}

	if spec.MetadataServiceTemplate.ContainerImage == "" {
		spec.MetadataServiceTemplate.ContainerImage = novaCellDefaults.MetadataContainerImageURL
	}

	if spec.NoVNCProxyServiceTemplate.ContainerImage == "" {
		spec.NoVNCProxyServiceTemplate.ContainerImage = novaCellDefaults.NoVNCContainerImageURL
	}
}


// ValidateMetadata validate metadata template
func (r *NovaCell) ValidateMetadata() *field.Error{
	if r.Spec.CellName == "cell0" && *r.Spec.MetadataServiceTemplate.Replicas != 0{
		return field.Forbidden(field.NewPath("spec").Child("MetadataServiceTemplate").Child("Replicas"), "should be 0 for cell0")
	}
	return nil
}

// NOTE: change verbs to "verbs=create;update;delete" if you want to enable deletion validation.
//+kubebuilder:webhook:path=/validate-nova-openstack-org-v1beta1-novacell,mutating=false,failurePolicy=fail,sideEffects=None,groups=nova.openstack.org,resources=novacells,verbs=create;update,versions=v1beta1,name=vnovacell.kb.io,admissionReviewVersions=v1

var _ webhook.Validator = &NovaCell{}

// ValidateCreate implements webhook.Validator so a webhook will be registered for the type
func (r *NovaCell) ValidateCreate() error {
	novacelllog.Info("validate create", "name", r.Name)
	var allErrs field.ErrorList

	if err := r.ValidateMetadata(); err != nil {
		allErrs = append(allErrs, err)
	}

	if len(allErrs) != 0 {
		novacelllog.Info("validation failed", "name", r.Name)
		return apierrors.NewInvalid(
			schema.GroupKind{Group: "nova.openstack.org", Kind: "Nova"},
			r.Name, allErrs)
	}
	return nil
}

// ValidateUpdate implements webhook.Validator so a webhook will be registered for the type
func (r *NovaCell) ValidateUpdate(old runtime.Object) error {
	novacelllog.Info("validate update", "name", r.Name)

	var allErrs field.ErrorList

	if err := r.ValidateMetadata(); err != nil {
		allErrs = append(allErrs, err)
	}

	if len(allErrs) != 0 {
		novacelllog.Info("validation failed", "name", r.Name)
		return apierrors.NewInvalid(
			schema.GroupKind{Group: "nova.openstack.org", Kind: "Nova"},
			r.Name, allErrs)
	}
	return nil
}

// ValidateDelete implements webhook.Validator so a webhook will be registered for the type
func (r *NovaCell) ValidateDelete() error {
	novacelllog.Info("validate delete", "name", r.Name)

	// TODO(user): fill in your validation logic upon object deletion.
	return nil
}
